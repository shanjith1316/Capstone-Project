import axios from "axios";
import { jwtDecode } from "jwt-decode"; // ‚úÖ Use named export

// ‚úÖ API Base URL
const AUTH_API_URL = "http://localhost:5137/api/auth";
const API_URL = "http://localhost:5137/api";

// ‚úÖ Register User
export const register = async (username, password) => {
    try {
        const response = await axios.post(`${AUTH_API_URL}/register`, {
            username,
            passwordHash: password,
        });
        return response.data;
    } catch (error) {
        console.error("‚ùå Registration failed:", error.response?.data?.error);
        return { error: error.response?.data?.error || "Registration failed" };
    }
};

// ‚úÖ Login User & Store Token in sessionStorage
export const login = async (username, password) => {
    try {
        const response = await axios.post(`${AUTH_API_URL}/login`, {
            username,
            passwordHash: password,
        });

        if (response.data.token) {
            sessionStorage.setItem("token", response.data.token); // ‚úÖ Use sessionStorage
            console.log("‚úÖ Token stored:", response.data.token);
        }

        return response.data;
    } catch (error) {
        console.error("‚ùå Login failed:", error.response?.data?.error);
        return { error: error.response?.data?.error || "Login failed" };
    }
};

// ‚úÖ Get Token from sessionStorage
export const getToken = () => {
    const token = sessionStorage.getItem("token") || null; // ‚úÖ Use sessionStorage
    console.log("üîç Retrieved Token:", token); // ‚úÖ Debug token retrieval
    return token;
};

// ‚úÖ Logout User
export const logout = () => {
    sessionStorage.removeItem("token"); // ‚úÖ Use sessionStorage
    console.log("üëã User logged out. Token removed.");
};

// ‚úÖ Get User ID from JWT Token
export const getUserId = () => {
    const token = getToken();
    if (!token) {
        console.warn("‚ö†Ô∏è No token found. User is not logged in.");
        return null;
    }

    try {
        const decoded = jwtDecode(token);
        console.log("üîç Decoded Token:", decoded); // ‚úÖ Debugging: Check token structure
        const userId = decoded["http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier"] || decoded.nameid || decoded.sub;
        console.log("üîç Retrieved UserId:", userId); // ‚úÖ Debug user ID
        return userId;
    } catch (error) {
        console.error("‚ùå Error decoding JWT:", error);
        return null;
    }
};

// ‚úÖ Get All Users (Except the Logged-In User)
export const getUsers = async () => {
    try {
        const response = await axios.get(`${API_URL}/users`, {
            headers: { Authorization: `Bearer ${getToken()}` }
        });
        return response.data;
    } catch (error) {
        console.error("‚ùå Error fetching users:", error);
        return [];
    }
};